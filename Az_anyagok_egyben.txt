; 7. labor -------------------------------------------------------------------------------------------
; match - pattern matching - minta illesztés
; nagyon jó dolog, mert van mellék hatása, azaz valami értéket kap
; szintaxisa:
; (match kif
;   [minta1 kif-ha-minta1re-illeszkedik-kif-értéke]
;   [minta2 kif-ha-minta2re-illeszkedik-kif-értéke]
;   ...
;   [else kif egyebként]
; szemantika: az első olyan ág fut le, ahol a kif értéke illeszkedik a mintára
; ami nagyon fontos, mellékhastásként a mintában levő változók értéket kapnak

(define (proba1)
    (match (list 1 2 3 ) [(list 1 x 3) x]))
(writeln (proba1))

(define (proba2 lst)
    (match lst [(list 1 x 3) x]))
(writeln (proba2 (list 1 2 3)))

(define (proba3 lst)
    (match lst [(cons fej farok) fej]))
(writeln (proba3 (list 1 2 3)))
; van egy kis érzéki csalódás, a (list 1 2 3) lényegében azt jelenti hogy, (cons 1 (cons 2 (cons 3 empty)))

(writeln (first (list 4 5 6)))
(writeln (second (list 4 5 6)))
(writeln (third (list 4 5 6)))

(define (myfirst lst)
    (match lst
        [(list ) void]
        [(cons fej _) fej])); _ = placeholder - név nélküli név
(writeln (myfirst (list "alma" "péter" 12)))

(define (mysecond lst)
    (match lst
        [(list ) void]
        [(cons _ (cons fej _)) fej])); _ = placeholder - név nélküli név
(writeln (mysecond (list "alma" "péter" 12)))

(define (mythird lst)
    (match lst
        [(list ) void]
        [(cons _ (cons _ (cons fej _))) fej])); _ = placeholder - név nélküli név
(writeln (mythird (list "alma" "péter" 12)))

; (map f lst) : az lst minden elemére meghívja f et, az így előálló listát adja vissza

(define (mymap func lst)
    (if (empty? lst)
    empty
    (cons (func (first lst)) (map func (rest lst)))))
(writeln (mymap add1 (list 1 2 3 4)))

(define (lenght-v1 lst)
    (cond
        [(empty? lst) 0]
        [else
            (define fej (first lst))
            (define farok (rest lst))
            (define farok-ertek (lenght-v1 farok))
            (+ farok-ertek 1)]))
            
(define (lenght-v2 lst)
    (match lst
        [(list ) 0]
        [(cons fej farok)
            (define farok-ertek (lenght-v2 farok))
            (+ farok-ertek 1)]))
            
(define (sum lst)
    (match lst
        [(list ) 0]
        [(cons fej farok)
            (define farok-ertek (sum farok))
            (+ farok-ertek fej)]))
            
; magasabb rendű fgvk
; azt mondjuk, hogy egy fgv magasabb rendű ha van fgv paramja
; legegyszerűbb: filter

(define (myfilter func lst)
    (cond
        [(empty? lst) empty]
        [else
            (define fej (first lst))
            (define farok (rest lst))
            (define farok-ertek (myfilter func farok))
            (if (f fej)
                (cons fej farok-ertek)
                farok-ertek)]))

; a reduce a map mellett a másik olyan magasabb rendű fgv amivel sok mindent ki lehet váltani
; eredetileg arra találták ki hogy a sumot lehessen könnyen megírni
; aztán kiderűlt hogy általános és sok mindenre jó
; szintaxisa: (reduce f érték-ha-üres lst)

(define (reduce f akku lst)
    (cond
        [(empty? lst) akku]
        [else
            (define fej (first lst))
            (define farok (rest lst))
            (define farok-ertek (reduce f akku farok))
            (f fej farok-ertek)]))
(define (add x y) (+ x y))
(writeln (reduce add 0 (list 1 2 3)))

(define (lenght-v3 lst)
    (define (fura-inc x y) (+ y 1))
    (reduce fura-inc 0 lst))

; 8.labor ---------------------------------------------------------------------------------------------------------
; mi is az a reduce:
; a listán elfogyasztom egy 2 paraméteres fgv.
; az első paraméter a lista feje, a második az eddigi részeredmény
; kell neutrális elem, mert első lefutásnál még nincs részeredmény
; sajnos a reduce-ot nem reducenak hívják racketben, hanem fold-nek 
; ezért első körben csinálunk egy aliaszt, hogy legyen reduce
; (map f1 lst), ahol f1 egy bármilyen 1 paraméteres fg.
; (reduce p1 lst), ahol p1 egy tetszőleges 1 paraméteres predikátum 
(define (reduce f2 neutrális lst) (foldl f2 neutrális lst))
; mire jó a reduce: könnyű megírni a sum-ot!
(define (add a b) (+ a b))
(define (sum lst) (reduce add 0 lst))
(writeln (sum (list 3 5 2)))
; (filter p lst): kiszűri az lst azon elemeit, amire p igazat ad
(writeln (filter even? (list 2 3 4 5 6 7 8)))

(define (my_filter p lst)
    (define (megtart_ha_igaz_p x A)
        (if (p x)
            (append A (list x))
                A))
    (reduce megtart_ha_igaz_p empty lst))
(writeln (my_filter even? (list 2 3 4 5 6 7 8)))

; 12.labor ----------------------------------------------------------------------------------------------------------

;második zh dec 5!!!:
;sok reduce
;sok map
;nem lesz matrix szorzás
;lesz define/contract csak 1 paramétert érint

(define matrix (list (list 1 2) (list 4 5) (list 7 8)))
(writeln (list matrix))
(writeln (map (lambda (x) (first x)) matrix))

(writeln (list-ref (list 12 34 56) 1)) ; megadott indexű elem

; Random map-os dolog -----------------------------------------------------------------------------------------------

(writeln "problem 5")
(define (pmap p f lst)
  (define (ff x) (if (p x) (f x) x))
  (map ff lst))
(define (inc x) (+ 1 x))
(writeln (pmap even? inc (list 1 2 3 4)))
(writeln (pmap odd? inc (list 1 2 3 4)))


(define (mmap f l)
  (define (ff a b)
    (cons (f a) b))
  (foldr ff '() l))
(writeln (mmap (lambda (x) (+ 1 x)) '(1 2 3)))

(writeln (map (lambda (i)
         (string-append i "!"))
       (list "peanuts" "popcorn" "crackerjack")))

; Contract ----------------------------------------------------------------------------------------------------------------

; szerződés alapú programozás design by contract
;minden függvénynek van elő és utófeltétele
; pre- and post-condition 
; pl bináris keresés előfeltétele hogy a bemeneti lista rendezett legyen
; pl gyökvonás bemenete egy szám ami nagyobb egyenlő mint 0
; osztás(a, b) esetén b nem lehet 0
; az előfeltétel a bemenetre vonatkozik
; kimenet: x = max(a,b) x>=a, x>=b
; i = keresindex(k, tömb) i==-1 vagy tömb[i] == k
; rövidzár kiértékelés: 
;hamis és drágafg(), mivel ugyis hamis lesz ezért a drágafg() nem fut le
; igaz vagy drágafg(), mivel ugyis igaz ezért a drágafg() nem fut le
; a visszatérési értékről az utófeltétel beszél
; előfeltétel egy megszorítás a bemenetekre
; utófeltétel egy megszorítás a kimenetre
; előfeltétel adhat megszorítást az állapotra is
; utófeltétel adhat megszorítást az állapotra is
; OOP-ben ráadásul még további veltületek vannak: history constraint
; Class Kutya{
;   String név = "Bodri" ;
;   public void setNév(String ujnev) { név = ujnev; }
; utófeltétele: a this belső állapoti megváltozik a név az az ujnév lesz
; belső állapot, inner state: a mezők pillanatnyi értéke 
; viselkedés, behavior: a futó programkód, a viselekedés függ attól, hogy melyik ágra fut rá a vezérlés, ami pedig a belső állapottól függ
; immutable: nincs belső állapot átmenet, a belső állapotot sehogy se lehet megváltozatni, ilyen pl a String: a.substring(2,3) nem változtatja meg a stringet, hanem visszaad egy ujat.
; stateless: nincs belső állapota, mert nincs egy mezője se
; class Kutya{
;   boolean mérges = false;
;   ...
;   public String ugat(){
;       if(mérges) return "GR... VAU VAU";
;       else return "VAU VAU"; 
;   }
; }
;
; szerződés alapú prgogramozás szintaxisa:
; (define/contract (név paramlista) (-> előfeltétel utófeltétel) (törzs))

(define/contract (osszead a b) 
    (-> number? number? number?) 
    (+ a b))
(writeln (osszead 2 3))

(define/contract (stradd a b)
    (-> string? number? number?)
    (+ b (string-length a)))

(writeln (stradd "alma" 3))

(define/contract (lsum lista)
    (-> list? (and/c number? integer?))
    (match lista
        [(list ) 0]
        [(cons fej farok) (if (string? fej) 
                                (+ (string-length fej) (lsum farok))
                                (+ fej (lsum farok)))]))
        
(writeln (lsum (list 1 2 3)))
(writeln (lsum (list 1 "ab" 3)))

(define/contract (inc n)
    (-> (and/c integer? (>/c 0)) integer?)
    (+ n 1))
(writeln (inc 5))

;(->i ([param1 előfeltétel]
;      [param2 (param1) előfeltétel]) 
;      [result utófeltétel])

(define/contract (inc2 n)
    (->i ([n (>/c 0)]) [result integer?])
    (+ n 1))
(writeln (inc2 5))

(define/contract (add-nagy-kicsi a b)
    (->i ([a (b) (>/c b)] [b integer?]) [result integer?])
    (+ a b))
(writeln (add-nagy-kicsi 6 5))

; ird be meg az add kicsi nagy
(define/contract (add-kicsi-nagy a b)
    (->i ([a (b) (</c b)] [b integer?]) [result integer?])
    (+ a b))
(writeln (add-kicsi-nagy 2 3))

(define (nagyobbmint5 x)
    (and (integer? x) (> x 5)))

; magasabb rendű függvények. def: azt mondjuk hogy az f függvény magasabb rendű akor és csak akkor ha van függvény típusú paramétere

(writeln (filter even? (filter number? (list 1 "alma" 2 6))))
(writeln (filter (and integer? (>/c 5)) (list 1 "alma" 2 6)))
(writeln (filter nagyobbmint5 (list 1 "alma" 2 6)))

(writeln (map sqrt (list 1 4 9)))
(writeln (map (lambda (x) (+ 1 x)) (list 1 4 9)))
(writeln (map inc (list 1 4 9)))

(define/contract (map2 f lista)
    (-> (-> any/c any/c) list? list?)
    (match lista
        [(list ) (list )]
        [(cons fej farok)
            (define farokertek (map2 f farok))
            (cons (f fej) farokertek)]))

(writeln (map2 inc (list 1 4 9)))

(define/contract (my-filter f lst)
    (-> (-> any/c boolean?) list? list?)
    (match lst
        [(list ) (list )]
        [(cons fej farok) (define farokertek  (my-filter f farok))
        (if (f fej) (cons fej farokertek) farokertek)]))
(writeln (my-filter even? (list 1 2 3)))

;részleges függvény, currying

;(require relation/function)

; szeretnék létrehozni egy olyan függvényt ami használható részleges függvényként
; azaz nem muszáj megmondanom az összes paraméterét
;(define/function (add a b) (+ a b))

;(define paradd (add 5)) létrejön egy add5 nevű függvény ami 1 paraméteres
;(writeln (add 5 3))
;(writeln (paradd 3))

; (define (szor1 a b) (* a b)) - int x int -> int
; (define/function (szor2 a b) (* a b)) - int -> (int -> int)

